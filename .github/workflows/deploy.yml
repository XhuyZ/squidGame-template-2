name: CI/CD

on:
  # Run checks on PRs targeting main
  pull_request:
    branches:
      - main
  # Run full build+deploy only when code lands in main
  push:
    branches:
      - main

jobs:
  # --- CI job (runs on PR + push) ---
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install client dependencies
        run: npm ci
        working-directory: ./client

      - name: Run client build
        run: npm run build --if-present
        working-directory: ./client

      - name: Run client tests
        run: npm test --if-present
        working-directory: ./client

      - name: Install server dependencies
        run: npm ci
        working-directory: ./server

      - name: Run server build
        run: npm run build --if-present
        working-directory: ./server

      # - name: Run server tests
      #   run: npm test --if-present
      #   working-directory: ./server

  # --- CD jobs (only on push to main) ---
  build-and-push-client:
    runs-on: ubuntu-latest
    needs: ci-checks   # ensures CI passes before deploy
    if: github.event_name == 'push'  # only run after merge
    environment: Dockerhub
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tags
        id: vars
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/squidgame
          GIT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "sha=$GIT_SHA" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ steps.vars.outputs.image }}:client-latest \
            -t ${{ steps.vars.outputs.image }}:client-${{ steps.vars.outputs.sha }} ./client

      - name: Push Docker images
        run: |
          docker push ${{ steps.vars.outputs.image }}:client-latest
          docker push ${{ steps.vars.outputs.image }}:client-${{ steps.vars.outputs.sha }}

  build-and-push-server:
    runs-on: ubuntu-latest
    needs: ci-checks   # ensures CI passes before deploy
    if: github.event_name == 'push'  # only run after merge
    environment: Dockerhub
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tags
        id: vars
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/squidgame
          GIT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "sha=$GIT_SHA" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ steps.vars.outputs.image }}:server-latest \
            -t ${{ steps.vars.outputs.image }}:server-${{ steps.vars.outputs.sha }} ./server

      - name: Push Docker images
        run: |
          docker push ${{ steps.vars.outputs.image }}:server-latest
          docker push ${{ steps.vars.outputs.image }}:server-${{ steps.vars.outputs.sha }}


